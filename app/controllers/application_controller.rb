class ApplicationController < ActionController::Base
  # Prevent CSRF attacks by raising an exception.
  # For APIs, you may want to use :null_session instead.
  protect_from_forgery with: :exception

  	##########################################################################
  	# 							   Helpers									 #
  	##########################################################################

  	# Go through the hash and delete all key-value pairs where the value is ""
  	# Returns the hash
	def cleanHash(hash)
		hash.each { |key, value|
			hash.delete "#{key}" if value == ""
		}
		return hash
	end

  # Make sure the start and end times are valid
  # Returns: Boolean representing validity of both times 
  def validTimeHashHelper(blipHash, tagName)
    return validTime(blipHash["#{tagName}(1i)"] ,
                     blipHash["#{tagName}(2i)"] , 
                     blipHash["#{tagName}(3i)"] , 
                     blipHash["#{tagName}(4i)"] ,
                     blipHash["#{tagName}(5i)"])
  end 

  # Make sure the time is valid:
  #  {RULE 1} - All values can be "" 
  #  {RULE 2} - If any value is not "" then year, month, day, hour and minute must be selected
  # Returns: Boolean representing validity of time
  def validTime(year , month , day , hour, minute) 
    if (year == "" && month == "" && day == "" && hour == "" && minute == "")       # Rule 1 
      return true
    else  
      return year != "" && month != "" && day != "" && hour != "" && minute != ""   # Rule 2 
    end
  end

  # Requires: All 5 time tags do exist in the blipHash
  # Returns: the epoch time from the time tags in the blipHash
  def getEpoch(blipHash, tagName)
    return Time.new(blipHash["#{tagName}(1i)"].to_i ,
                    blipHash["#{tagName}(2i)"].to_i ,
                    blipHash["#{tagName}(3i)"].to_i ,
                    blipHash["#{tagName}(4i)"].to_i ,
                    blipHash["#{tagName}(5i)"].to_i).to_i * 1000                    # *1000 because the epoch in the database has miliseconds and to_i doesn't include miliseconds
  end

  # Deletes all the time tags generated by the dateTime select for both startTime and endTime
  # Returns: The new hash with no time tags
  def removeTimeTags(blipHash, tagName)
    [1,2,3,4,5].each { |n|
      blipHash.delete "#{tagName}(#{n}i)"
    }
    return blipHash
  end

end
